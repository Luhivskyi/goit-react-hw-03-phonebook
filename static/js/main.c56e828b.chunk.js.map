{"version":3,"sources":["Components/ContactsList/ContactListItem.module.css","Components/Filter/Filter.module.css","Components/ContactsList/ContactsList.module.css","Components/ContactForm/ContactForm.module.css","Components/ContactForm/ContactForm.js","Components/ContactsList/ContactListItem.js","Components/ContactsList/ContactList.js","Components/Filter/Filter.js","App.js","index.js"],"names":["module","exports","INITIAL__STATE","name","number","ContactForm","state","handleChangeForm","target","value","setState","handleFormSubmit","event","preventDefault","onAdd","props","validateForm","id","uuid","resetForm","onCheckUnique","alert","this","className","s","item_form","onSubmit","item_input","type","pattern","title","required","onChange","btn_submit","Component","ContactListItem","onRemove","item_contact","item_button","onClick","ContactsList","contacts","contact_list","map","contact","key","Filter","filter","filter_envelope","item_element","placeholder","App","handleAddContact","newContact","handleCheckUnique","isExistContact","find","handleRemoveContact","handleFilterChange","getVisibleContacts","toLowerCase","includes","localStorage","getItem","parsedContacts","JSON","parse","prevProps","prevState","setItem","stringify","visibleContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c56e828b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item_contact\":\"ContactListItem_item_contact__3-Bof\",\"item_button\":\"ContactListItem_item_button__3Ds15\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item_element\":\"Filter_item_element__2YDvW\",\"filter_envelope\":\"Filter_filter_envelope__3oqG7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact_list\":\"ContactsList_contact_list__3Pwzm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item_form\":\"ContactForm_item_form__2u20f\",\"item_input\":\"ContactForm_item_input__z5zM-\",\"btn_submit\":\"ContactForm_btn_submit__3kIKR\"};","import { Component } from \"react\";\r\nimport s from \"./ContactForm.module.css\";\r\nimport PropTypes from \"prop-types\";\r\nimport { v4 as uuid } from \"uuid\";\r\n\r\nconst INITIAL__STATE = {\r\n  name: \"\",\r\n  number: \"\",\r\n};\r\n\r\nclass ContactForm extends Component {\r\n  static propTypes = {\r\n    onAdd: PropTypes.func.isRequired,\r\n    onCheckUnique: PropTypes.func.isRequired,\r\n  };\r\n\r\n  state = INITIAL__STATE;\r\n\r\n  handleChangeForm = ({ target }) => {\r\n    const { name, value } = target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleFormSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    const { name, number } = this.state;\r\n    const { onAdd } = this.props;\r\n    const isValidatedForm = this.validateForm();\r\n    if (!isValidatedForm) return;\r\n    onAdd({ id: uuid(), name, number });\r\n\r\n    this.resetForm();\r\n  };\r\n\r\n  validateForm = () => {\r\n    const { name, number } = this.state;\r\n    const { onCheckUnique } = this.props;\r\n    if (!name || !number) {\r\n      alert(\"Some fild is empty\");\r\n      return false;\r\n    }\r\n    return onCheckUnique(name);\r\n  };\r\n\r\n  resetForm = () => {\r\n    this.setState({ name: \"\", number: \"\" });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n\r\n    return (\r\n      <form className={s.item_form} onSubmit={this.handleFormSubmit}>\r\n        <input\r\n          className={s.item_input}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          onChange={this.handleChangeForm}\r\n          value={name}\r\n        />\r\n\r\n        <input\r\n          className={s.item_input}\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          onChange={this.handleChangeForm}\r\n          value={number}\r\n        />\r\n\r\n        <button className={s.btn_submit} type=\"submit\">\r\n          Add Contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ContactForm;\r\n","import React from \"react\";\r\nimport s from \"./ContactListItem.module.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst ContactListItem = ({ id, name, number, onRemove }) => {\r\n  return (\r\n    <li className={s.item_contact}>\r\n      {name}: {number}{\" \"}\r\n      <button className={s.item_button} onClick={() => onRemove(id)}>\r\n        delete\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\nContactListItem.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n  onRemove: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactListItem;\r\n","import React from \"react\";\r\nimport s from \"./ContactsList.module.css\";\r\nimport PropTypes from \"prop-types\";\r\nimport ContactListItem from \"./ContactListItem\";\r\n\r\nconst ContactsList = ({ contacts, onRemove }) => {\r\n  // if (contacts.length === 0) return null\r\n  return (\r\n    <ul className={s.contact_list}>\r\n      {contacts.map((contact) => (\r\n        <ContactListItem {...contact} onRemove={onRemove} key={contact.id} />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nContactsList.propTypes = {\r\n  contacts: PropTypes.array.isRequired,\r\n  onRemove: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactsList;\r\n","import PropTypes from \"prop-types\";\r\nimport s from \"./Filter.module.css\";\r\n\r\nconst Filter = ({ filter, onChange }) => {\r\n  return (\r\n    <div className={s.filter_envelope}>\r\n      <input\r\n        className={s.item_element}\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        value={filter}\r\n        onChange={(event) => onChange(event.target.value)}\r\n        placeholder=\"Enter name for Search\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  filter: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;\r\n","import { Component } from \"react\";\r\nimport ContactForm from \"./Components/ContactForm\";\r\nimport ContactsList from \"./Components/ContactsList\";\r\nimport Filter from \"./Components/Filter\";\r\n\r\nexport default class App extends Component {\r\n  state = {\r\n    contacts: [\r\n      { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\r\n      { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\r\n      { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\r\n      { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\r\n    ],\r\n    filter: \"\",\r\n  };\r\n\r\n  componentDidMount() {\r\n    const contacts = localStorage.getItem(\"contacts\");\r\n    const parsedContacts = JSON.parse(contacts);\r\n\r\n    if (parsedContacts) {\r\n      this.setState({ contacts: parsedContacts });\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (this.state.contacts !== prevState.contacts) {\r\n      localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\r\n    }\r\n  }\r\n\r\n  handleAddContact = (newContact) =>\r\n    this.setState(({ contacts }) => ({\r\n      contacts: [...contacts, newContact],\r\n    }));\r\n\r\n  handleCheckUnique = (name) => {\r\n    const { contacts } = this.state;\r\n    const isExistContact = !!contacts.find((contact) => contact.name === name);\r\n\r\n    isExistContact && alert(\"Contact is already exist\");\r\n    return !isExistContact;\r\n  };\r\n\r\n  handleRemoveContact = (id) =>\r\n    this.setState(({ contacts }) => ({\r\n      contacts: contacts.filter((contact) => contact.id !== id),\r\n    }));\r\n\r\n  handleFilterChange = (filter) => this.setState({ filter });\r\n\r\n  getVisibleContacts = () => {\r\n    const { contacts, filter } = this.state;\r\n    return contacts.filter((contact) =>\r\n      contact.name.toLowerCase().includes(filter.toLowerCase())\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { filter } = this.state;\r\n    const visibleContacts = this.getVisibleContacts();\r\n\r\n    return (\r\n      <>\r\n        <h2> Form Contact</h2>\r\n        <ContactForm\r\n          onAdd={this.handleAddContact}\r\n          onCheckUnique={this.handleCheckUnique}\r\n        />\r\n        <h2> Contacts</h2>\r\n        <ContactsList\r\n          contacts={visibleContacts}\r\n          onRemove={this.handleRemoveContact}\r\n        />\r\n\r\n        <h3> Find contacts by name</h3>\r\n        <Filter filter={filter} onChange={this.handleFilterChange} />\r\n      </>\r\n    );\r\n  }\r\n}\r\n","\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App'\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}